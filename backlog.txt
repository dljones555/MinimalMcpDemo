- [ ] **Prompt Loader & Organization** - Load, organize, and chain prompts by folder ("roots") for modular, reusable prompt sets (e.g., sales, customer service).
- [ ] **Prompt Evaluation & Testing** - Enable non-engineers to test and evaluate prompts, supporting prompt lifecycle and quality.
- [ ] **Prompt Versioning** - Track and manage prompt versions for audit, rollback, and improvement.
- [ ] **Prompt Templates & Functions** - Support parameterized prompt templates and prompt functions for dynamic LLM workflows.
- [ ] **Prompt Chaining** - Allow prompts to be composed or chained (e.g., instructions, examples, output formats) for advanced scenarios.
- [ ] **MCP Roots & Resources** - Expose prompt sets as MCP resources/roots for discoverability and filtering.
- [ ] **MCP RequestParams Root Support** - Add root support to MCPClient requestparams (submit PR to Microsoft).
- [ ] **HTTP Prompt Sources** - Load prompts from external sources (LangChain Hub, GitHub, Azure PromptFlow, AWS Converse, PromptLayer, etc.).
- [ ] **Cloud Storage Support** - Load prompts from S3 buckets and Azure Blob Storage for enterprise-scale ops.
- [ ] **Security & Auth** - Implement OAuth/OIDC for secure prompt operations and access control.
- [ ] **Prompt Source Prioritization** - Allow prioritization and fallback between multiple prompt sources.
- [ ] **Python Implementation** - Provide a Python version for cross-ecosystem adoption and demos.
- [ ] **Ensure MCP Spec Compliance** - Ensure all features comply with the MCP spec for compatibility and interoperability.
---

**High Value Features (for monetization, sponsorship, or skill showcase):**
- Prompt Loader & Organization
- Prompt Evaluation & Testing
- Prompt Versioning
- Prompt Templates & Functions
- Prompt Chaining
- MCP Roots & Resources
- Security & Auth
- HTTP/Cloud Prompt Sources

---

*Each item is a feature. Check when complete. Short text describes the value for users and sponsors.*

Notes


8/2/2025

- Code "shows idea" but is still vibe coded poorly
- Client root filtering
- Copilot did not honor refactor request to use MCP Prompt class though this might move it away from supporting
other prompt formats if we really want to do that

- Demo would be show on Github models with "non engineering" user. Save prompt. 
- git pull locally - have app use new prompt or git API pull new version 
- MCP has notification feature
- Workflow still engineering like. Should require a feature branch and PR

	- Tested Github Models ability to save prompt.yml to a folder a repo
	- Found UI confusing. Shows /Prompts as prefix as if existing folder. I did not initially have this folder.
	- It put in root folder.
	- You can fully qualify a path like /Prompts/CustomerService/Prompt1.prompt.yml - it will save to existing or create new folder
	- It is case sensitive
	- Tied to .prompt.yml format

Implementation "demonstrates" idea
